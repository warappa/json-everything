@page "/json-schema"
@using Json.Schema.DataGeneration
@using BlazorMonaco
@using Json.Schema
@using System.Text.Json
@using Json.Schema.Data
@using Json.Schema.Generation
@using Json.Schema.UniqueKeys
@using JsonEverythingNet.Services
@using Radzen
@using Radzen.Blazor
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using System.Reflection
@using System.Text.Json.Nodes
@using Json.Schema.OpenApi

@inject CookieManager CookieManager;
@inject NavigationManager NavigationManager;

<PageTitle>JSON Schema - json-everything.net</PageTitle>

<div class="row fill-remaining">
	<RadzenPanelMenu class="col-2 mh-100 mw-content" Click="SetPagePath">
		<RadzenPanelMenuItem Text="Playground" Icon="science" Value="@("playground/schema")"/>
		<RadzenPanelMenuItem Text="Documentation" Icon="article" Expanded="true">
			<RadzenPanelMenuItem Text="Overview" Value="@("schema-basics")"/>
			<RadzenPanelMenuItem Text="Vocabularies" Value="@("schema-vocabs")"/>
			<RadzenPanelMenuItem Text="Schema Generation" Value="@("schema-generation")"/>
			<RadzenPanelMenuItem Text="Data Generation" Value="@("schema-datagen")"/>
			<RadzenPanelMenuItem Text="Vocabulary: data" Value="@("vocabs-data")"/>
			<RadzenPanelMenuItem Text="Vocabulary: uniqueKeys" Value="@("vocabs-unique-keys")"/>
		</RadzenPanelMenuItem>
		<RadzenPanelMenuItem Text="Examples (work in progress)" Icon="format_list_numbered" Expanded="true">
			<RadzenPanelMenuItem Text="Version Selection" Value="@("examples/schema/version-selection")"/>
			<RadzenPanelMenuItem Text="Managing External Schemas" Value="@("examples/schema/external-schemas")"/>
			<RadzenPanelMenuItem Text="Managing Options" Value="@("examples/schema/managing-options")"/>
		</RadzenPanelMenuItem>
		<RadzenPanelMenuItem Text="Release Notes" Icon="format_list_numbered" Expanded="true">
			<RadzenPanelMenuItem Text="JsonSchema.Net" Value="@("release-notes/json-schema")"/>
			<RadzenPanelMenuItem Text="JsonSchema.Net.Generation" Value="@("release-notes/json-schema-generation")"/>
			<RadzenPanelMenuItem Text="JsonSchema.Net.DataGeneration" Value="@("release-notes/json-schema-datageneration")"/>
			<RadzenPanelMenuItem Text="JsonSchema.Net.Data" Value="@("release-notes/json-schema-data")"/>
			<RadzenPanelMenuItem Text="JsonSchema.Net.UniqueKeys" Value="@("release-notes/json-schema-unique-keys")"/>
		</RadzenPanelMenuItem>
		<RadzenPanelMenuItem Text="API Reference (work in progress)" Icon="format_list_numbered" Expanded="true">
			<ApiIndex AssemblyContaining="@typeof(JsonSchema)"/>
			<ApiIndex AssemblyContaining="@typeof(ISchemaRefiner)"/>
			<ApiIndex AssemblyContaining="@typeof(NumberRange)"/>
			<ApiIndex AssemblyContaining="@typeof(DataKeyword)"/>
			<ApiIndex AssemblyContaining="@typeof(DiscriminatorKeyword)"/>
			<ApiIndex AssemblyContaining="@typeof(UniqueKeysKeyword)"/>
		</RadzenPanelMenuItem>
	</RadzenPanelMenu>
	<div class="col-8-stretch mh-100 scroll">
		<div class="navbar me-2">
			<div class="align-items-center hstack mx-2">
				<h1 class="display-4">JSON Schema</h1>
				<div class="align-items-center mx-3">
					<div>
						Constraints-based validation of JSON data
						<br/>
						Learn more about
						<a href="https://json-schema.org" target="_blank">JSON Schema <ExternalLinkIcon/></a>
					</div>
				</div>
			</div>
			<div class="align-items-center mt-1">
				@foreach (var library in _libraries)
				{
				    <NugetLibrary Library="library"/>
				}
			</div>
		</div>

		<div class="vstack gap-3 mt-4 me-3 @_playgroundStyle">
			<div>
				<div class="row">
					<div class="col-5">
						<label class="w-100">
							@SchemaEditorLabel
							<div class="editor-input">
								<MonacoEditor @ref="_schemaEditor" Id="editor-schema" ConstructionOptions="BasicOptions"
								              CssClass="h-100" OnKeyUp="HandleSchemaChanged"/>
							</div>
						</label>
					</div>
					<div class="col mx-3">
						<div class="vstack gap-3">
							<EditForm Model="_options" class="vstack">
								<label class="my-2">
									Output format<br/>
									<InputSelect @bind-Value="_options.OutputFormat" DisplayName="Output format" class="form-control">
										@foreach (var format in Enum.GetValues(typeof(OutputFormat)))
										{
											<option value="@format">@format</option>
										}
									</InputSelect>
								</label>
								<label class="my-2">
									Draft (<span class="small"><span class="font-monospace">$schema</span> will override</span>)<br/>
									<InputSelect @bind-Value="_options.Draft" DisplayName="Draft" class="form-control">
										@foreach (Draft draft in Enum.GetValues(typeof(Draft)))
										{
											if (draft == Draft.Unspecified) continue;
											<option value="@draft">@GetDescription(draft)</option>
										}
									</InputSelect>
								</label>
								<label class="my-2">
									Default base URI<br/>
									<InputText @bind-Value="_options.DefaultBaseUri" DisplayName="Default base URI" class="form-control"/>
								</label>
								<label class="my-2">
									<InputCheckbox @bind-Value="_options.ValidateFormat" DisplayName="Validate format"/>
									Validate <span class="font-monospace">format</span>
								</label>
								<button class="btn btn-primary" @onclick="Validate">Validate</button>
								<hr/>
								<label class="my-2">
									Input Language<br/>
									<InputSelect @bind-Value="InputLanguage" DisplayName="Output format" class="form-control">
										<option value="json">JSON</option>
										<option value="csharp">C#</option>
									</InputSelect>
								</label>
								<button class="btn btn-primary" @onclick="Generate">@GenerateButtonText</button>
							</EditForm>
						</div>
					</div>
					<div class="col-5">
						<label class="w-100">
							Instance
							<div class="editor-input">
								<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
								              CssClass="h-100" OnKeyUp="HandleInstanceChanged"/>
							</div>
						</label>
					</div>
				</div>
			</div>
		    
			<label>
				Results
				<div class="editor-input">
					<MonacoEditor @ref="_outputEditor" Id="editor-otuput" ConstructionOptions="ReadOnlyOptions"
					              CssClass="h-100"/>
				</div>
			</label>
		</div>
		<div class="ms-4">
			<Docs @ref="_docs" Page="playground/schema"/>
		</div>
	</div>
</div>

@code {	
    private const string _generateDataText = "Generate Data";
    private const string _generateSchemaText = "Generate Schema";

#pragma warning disable CS8618
	private MonacoEditor _schemaEditor;
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;
	private Docs _docs;
	private string _playgroundStyle = "";

	private readonly SchemaOptionsModel _options = new();

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonSchema>(),
		LibraryVersion.GetFor<DataKeyword>(),
		LibraryVersion.GetFor<UniqueKeysKeyword>(),
		LibraryVersion.GetFor<DiscriminatorKeyword>(),
		LibraryVersion.GetFor<ISchemaRefiner>(),
		LibraryVersion.GetFor<Bound>()
	};

	private string _inputLanguage = "json";
	private IEnumerable<MetadataReference> _references;

#pragma warning restore CS8618

	private class SchemaOptionsModel
	{
		public OutputFormat OutputFormat { get; set; } = OutputFormat.Hierarchical;
		public Draft Draft { get; set; } = Draft.Draft202012;
		public string? DefaultBaseUri { get; set; }
		public bool ValidateFormat { get; set; }

		public ValidationOptions ToValidationOptions() => new()
		{
			OutputFormat = OutputFormat,
			ValidateAs = Draft,
			DefaultBaseUri = Uri.TryCreate(DefaultBaseUri, UriKind.Absolute, out var uri)
				? uri
				: null!,
			RequireFormatValidation = ValidateFormat
		};
	}

	private string GenerateButtonText { get; set; } = _generateDataText;

	private string InputLanguage
	{
		get => _inputLanguage;
		set
		{
			_inputLanguage = value;
			GenerateButtonText = value switch {
				"json" => _generateDataText,
				"csharp" => _generateSchemaText,
				_ => throw new ArgumentOutOfRangeException(nameof(value), value, null)};
			_schemaEditor.GetModel()
				.ContinueWith(x => MonacoEditorBase.SetModelLanguage(x.Result, _inputLanguage));
			SchemaEditorLabel = value switch {
				"json" => "Schema",
				"csharp" => "Class Definition",
				_ => throw new ArgumentOutOfRangeException(nameof(value), value, null)};
			Task.Run(() => CookieManager.Set("schema-input-language", value));
		}
	}

	private string SchemaEditorLabel { get; set; } = "Schema";

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	private static string GetDescription(Draft draft) => draft switch
	{
		Draft.Draft6 => "Draft 6",
		Draft.Draft7 => "Draft 7",
		Draft.Draft201909 => "Draft 2019-09",
		Draft.Unspecified => "Draft 2020-12",
		Draft.Draft202012 => "Draft 2020-12",
		_ => "Draft 2020-12"
	};

	private async Task Validate()
	{
		JsonSchema schema;
		try
		{
			var text = await _schemaEditor.GetValue();
			schema = JsonSchema.FromText(text);
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Schema is invalid\n\n{e.Message}");
			return;
		}
		JsonNode? instance;
		try
		{
			instance = JsonNode.Parse(await _instanceEditor.GetValue());
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Instance is invalid\n\n{e.Message}");
			return;
		}

		var results = schema.Validate(instance, _options.ToValidationOptions());

		var resultText = JsonSerializer.Serialize(results, new JsonSerializerOptions
		{
			WriteIndented = true,
			Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
		});

		await _outputEditor.SetValue(resultText);
	}

	private async Task Generate()
	{
		switch (_inputLanguage)
		{
			case "json":
				await GenerateData();
				break;
			case "csharp":
				await GenerateSchema();
				break;
		}
	}

	private async Task GenerateData()
	{
		JsonSchema schema;
		try
		{
			schema = JsonSchema.FromText(await _schemaEditor.GetValue());
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Schema is invalid\n\n{e.Message}");
			return;
		}

		var generationResults = schema.GenerateData();

		if (generationResults.IsSuccess)
		{
			var instance = JsonSerializer.Serialize(generationResults.Result, new JsonSerializerOptions {WriteIndented = true});
			await _instanceEditor.SetValue(instance);
			await HandleInstanceChanged();
		}
		else
		{
			await _outputEditor.SetValue(generationResults.ErrorMessage);
		}
	}

	private async Task GenerateSchema()
	{
		try
		{
			var source = await _schemaEditor.GetValue();

			var fullSource = $@"
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using Json.Schema;
using Json.Schema.Generation;

namespace JsonEverythingTemp
{{
	{source}
}}";

			var syntaxTree = CSharpSyntaxTree.ParseText(fullSource);
			var assemblyPath = System.IO.Path.ChangeExtension(System.IO.Path.GetTempFileName(), "dll");

			var compilation = CSharpCompilation.Create(System.IO.Path.GetFileName(assemblyPath))
				.WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
				.AddReferences(_references)
				.AddSyntaxTrees(syntaxTree);

			using var dllStream = new MemoryStream();
			using var pdbStream = new MemoryStream();
			var emitResult = compilation.Emit(dllStream, pdbStream);
			if (!emitResult.Success)
			{
				Console.WriteLine("You may expect a list of what compilation errors there are, but unfortunately " +
				                  "Roslyn doesn't seem to be giving that information out (or I don't know how to " +
				                  "interpret it.  So instead, here are the errors in raw form.  Good luck.  If you " +
				                  "know what these mean, please drop a line in a GitHub issue.");
				await _instanceEditor.SetValue("Compilation error");
				//var errors = string.Join("\n", emitResult.Diagnostics.Where(x => x.Severity == DiagnosticSeverity.Error)
				//	.Select(x => GetErrorDetails(source, x)));
				//await _instanceEditor.SetValue(errors);
				return;
			}

			var assembly = Assembly.Load(dllStream.ToArray());
			var type = assembly.DefinedTypes.First();

			JsonSchema schema = new JsonSchemaBuilder().FromType(type);

			await _instanceEditor.SetValue(JsonSerializer.Serialize(schema, new JsonSerializerOptions { WriteIndented = true }));
		}
		catch (Exception e)
		{
			await _instanceEditor.SetValue(e.Message);
			throw;
		}
	}

	//private static string GetErrorDetails(string source, Diagnostic diagnostic)
	//{
	//	Console.WriteLine(JsonSerializer.Serialize(diagnostic, new JsonSerializerOptions { WriteIndented = true }));
	//	var start = diagnostic.Location.SourceSpan.Start - 115;
	//	var lineNumber = source[..start].Count(x => x == '\n') + 1;
	//	var lastNewLine = source[..start].LastIndexOf('\n') - 1;
	//	var columnNumber = start - lastNewLine;

	//	return $"Compilation error at line {lineNumber}, col {columnNumber}";
	//	return "Compilation error";
	//}

	private async Task HandleSchemaChanged()
	{
		await CookieManager.SaveEditorValue(_schemaEditor, "schema");
	}

	private async Task LoadSavedSchema()
	{
		await CookieManager.LoadEditorValue(_schemaEditor, "schema");
	}

	private async Task HandleInstanceChanged()
	{
		await CookieManager.SaveEditorValue(_instanceEditor, "schema-instance");
	}

	private async Task LoadSavedInstance()
	{
		await CookieManager.LoadEditorValue(_instanceEditor, "schema-instance");
	}

	private void LoadSavedSettings()
	{
		InputLanguage = CookieManager.Get("schema-input-language") ?? "json";
	}

	private async Task SetPagePath(MouseEventArgs args)
	{
		if (args is not MenuItemEventArgs menuArgs) return;

		var page = (string?)menuArgs.Value;
		if (page == null) return;

		await _docs.SetPage(page);
		_playgroundStyle = page == "playground/schema" ? "" : "d-none";
	}

	protected override async Task OnInitializedAsync()
	{
		await CookieManager.Initialize();
	    await _outputEditor.SetValue(string.Empty);

		Json.Schema.Data.Vocabularies.Register();
		Json.Schema.UniqueKeys.Vocabularies.Register();
		Json.Schema.OpenApi.Vocabularies.Register();

		await LoadSavedSchema();
		await LoadSavedInstance();
		LoadSavedSettings();
		await LoadAssemblyReferences();
	}

	private async Task LoadAssemblyReferences()
	{
		var refs = AppDomain.CurrentDomain.GetAssemblies();
		var client = new HttpClient 
		{
			BaseAddress = new Uri(NavigationManager.BaseUri)
		};
 
		var references = new List<MetadataReference>();

		foreach (var reference in refs.Where(x => !x.IsDynamic))
		{
			Console.WriteLine($"{reference.FullName}\n  Location - {reference.Location}\n");
		}

		foreach(var reference in refs.Where(x => !x.IsDynamic))
		{
			var stream = await client.GetStreamAsync($"_framework/{reference.FullName!.Split(',')[0]}.dll");
			references.Add(MetadataReference.CreateFromStream(stream));
		}
 
		_references = references;
	}
}