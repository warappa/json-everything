<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonLogic</name>
    </assembly>
    <members>
        <member name="T:Json.Logic.JsonLogic">
            <summary>
            Provides factory methods to create operations.
            </summary>
        </member>
        <member name="M:Json.Logic.JsonLogic.And(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates an `and` rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>An `and` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Or(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates an `or` rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>An `or` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Not(Json.Logic.Rule)">
            <summary>
            Creates a `!` ("not") rule.
            </summary>
            <param name="value">The rule to negate.</param>
            <returns>A `!` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.BoolCast(Json.Logic.Rule)">
            <summary>
            Creates a `!!` ("boolean cast") rule.
            </summary>
            <param name="value">The rule to negate.</param>
            <returns>A `!!` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.If(Json.Logic.Rule[])">
            <summary>
            Creates an `if` rule.
            </summary>
            <param name="components">The rule chain to process.</param>
            <returns>An `if` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Add(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates a `+` ("add") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>A `+` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Subtract(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates a `-` ("subtract") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>A `-` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Multiply(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates a `*` ("multiply") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>A `*` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Divide(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `/` ("divide") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="b"></param>
            <returns>A `/` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Modulus(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `%` ("modulus") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="b"></param>
            <returns>A `%` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Max(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates a `max` rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>A `max` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Min(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates a `min` rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>A `min` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.StrictEquals(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `===` ("strict equal") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="b">The second rule.</param>
            <returns>A `===` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.StrictNotEquals(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `!==` ("strict not equal") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="b">The second rule.</param>
            <returns>A `!==` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.LooseEquals(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `==` ("loose equal") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="b">The second rule.</param>
            <returns>A `==` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.LooseNotEquals(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `!=` ("loose not equal") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="b">The second rule.</param>
            <returns>A `!=` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.LessThan(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `&lt;` ("less than") rule.
            </summary>
            <param name="a">The lower limit rule.</param>
            <param name="b">The upper limit rule.</param>
            <returns>A `&lt;` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.BetweenExclusive(Json.Logic.Rule,Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a three-argument `&lt;` ("exclusive between") rule.
            </summary>
            <param name="a">The lower limit rule.</param>
            <param name="b">The rule.</param>
            <param name="c">The upper limit rule.</param>
            <returns>A `&lt;` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.LessThanOrEqual(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `&lt;=` ("less than or equal") rule.
            </summary>
            <param name="a">The lower limit rule.</param>
            <param name="b">The upper limit rule.</param>
            <returns>A `&lt;=` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.BetweenInclusive(Json.Logic.Rule,Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a three-argument `&lt;=` ("inclusive between") rule.
            </summary>
            <param name="a">The lower limit rule.</param>
            <param name="b">The second rule.</param>
            <param name="c">The upper limit rule.</param>
            <returns>A `&lt;=` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.MoreThan(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `&gt;` ("more than") rule.
            </summary>
            <param name="a">The upper limit rule.</param>
            <param name="b">The lower limit rule.</param>
            <returns>A `&gt;` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.MoreThanOrEqual(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `&gt;=` ("more than or equal") rule.
            </summary>
            <param name="a">The upper limit rule.</param>
            <param name="b">The lower limit rule.</param>
            <returns>A `&gt;` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Cat(Json.Logic.Rule,Json.Logic.Rule[])">
            <summary>
            Creates a `cat` ("concatenation") rule.
            </summary>
            <param name="a">The first rule.</param>
            <param name="more">Subsequent rules.</param>
            <returns>A `cat` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Substr(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `substr` ("concatenation") rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="start">The start rule.</param>
            <returns>A `substr` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Substr(Json.Logic.Rule,Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `substr` ("concatenation") rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="start">The start rule.</param>
            <param name="count">The count rule.</param>
            <returns>A `substr` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.All(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates an `all` rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="rule">The predicate to test by.</param>
            <returns>An `all` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Some(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `some` ("any") rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="rule">The predicate to test by.</param>
            <returns>A `some` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.None(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `none` rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="rule">The predicate to test by.</param>
            <returns>A `none` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Missing(Json.Logic.Rule[])">
            <summary>
            Creates a `missing` rule.
            </summary>
            <param name="components">The missing components.</param>
            <returns>A `missing` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.MissingSome(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `missing-some` rule.
            </summary>
            <param name="requiredCount">The required count.</param>
            <param name="components">The missing components.</param>
            <returns>A `missing_some` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.In(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `none` rule.
            </summary>
            <param name="test">The predicate to test by.</param>
            <param name="input">The input rule.</param>
            <returns>A `none` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Map(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `map` rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="rule">The predicate to test by.</param>
            <returns>A `map` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Reduce(Json.Logic.Rule,Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `reduce` rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="rule">The predicate to test by.</param>
            <param name="initial">The initial rule.</param>
            <returns>A `reduce` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Filter(Json.Logic.Rule,Json.Logic.Rule)">
            <summary>
            Creates a `filter` rule.
            </summary>
            <param name="input">The input rule.</param>
            <param name="rule">The predicate to test by.</param>
            <returns>A `filter` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Merge(Json.Logic.Rule[])">
            <summary>
            Creates a `merge` rule.
            </summary>
            <param name="items">The items to merge.</param>
            <returns>A `merge` rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Literal(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a rule that stands in for a literal JSON value.
            </summary>
            <param name="value">The JSON value.</param>
            <returns>A literal rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Variable(System.String)">
            <summary>
            Creates a `var` rule that accesses data.
            </summary>
            <param name="path"></param>
            <returns>A variable rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Variable(System.String,Json.Logic.Rule)">
            <summary>
            Creates a `var` rule that accesses data.
            </summary>
            <param name="path">The dot-delimited path.</param>
            <param name="defaultValue">A default value to use if the path is not found.</param>
            <returns>A variable rule.</returns>
        </member>
        <member name="M:Json.Logic.JsonLogic.Log(Json.Logic.Rule)">
            <summary>
            Functions as a no-op.  Processes the rule, then logs and returns the output.
            </summary>
            <param name="log">The rule to log.</param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.JsonLogicException">
            <summary>
            Thrown when a rule cannot be processed or deserialized.
            </summary>
        </member>
        <member name="M:Json.Logic.JsonLogicException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Json.Logic.JsonLogicException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Json.Logic.JsonNodeExtensions">
            <summary>
            Provides fuzzy-logic extensions for <see cref="T:System.Text.Json.Nodes.JsonNode"/> values.
            </summary>
        </member>
        <member name="M:Json.Logic.JsonNodeExtensions.IsTruthy(System.Text.Json.Nodes.JsonNode)">
             <summary>
             Determines whether a value can be considered as `true`.
             </summary>
             <param name="node">The element.</param>
             <returns>
             `true` if the value is:
            
             - a non-empty array
             - a non-empty string
             - a non-zero number
             - true
            
            	`false` otherwise
            
             </returns>
        </member>
        <member name="M:Json.Logic.JsonNodeExtensions.Stringify(System.Text.Json.Nodes.JsonNode)">
             <summary>
             Provides a loose-cast to a string.
             </summary>
             <param name="node">The node.</param>
             <returns>
            	A string representation of the value as follows:
            
             - arrays are the elements stringified and comma-delimited
             - null returns the empty string
             - objects return null (not stringifiable)
            	- numbers and booleans return their JSON equivalents
             - strings are unchanged
             </returns>
        </member>
        <member name="M:Json.Logic.JsonNodeExtensions.Numberify(System.Text.Json.Nodes.JsonNode)">
             <summary>
             Provides a loose-cast to a number.
             </summary>
             <param name="node">The node.</param>
             <returns>
            	A string representation of the value as follows:
            
             - strings try to parse a number from the value
             - true returns 1
             - false returns 0
            	- numbers are unchanged
             - null, objects, and arrays return null (not numberifiable)
             </returns>
        </member>
        <member name="M:Json.Logic.JsonNodeExtensions.Flatten(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Flattens an array into its root components (removes intermediate arrays).
            </summary>
            <param name="root">The element.</param>
            <returns>Returns a single array with all of the intermediate arrays removed.</returns>
        </member>
        <member name="M:Json.Logic.JsonNodeExtensions.LooseEquals(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Provides loose equality comparison of <see cref="T:System.Text.Json.Nodes.JsonNode"/> values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>`true` if the values are loosely equal; `false` otherwise.</returns>
            <remarks>
            Adapted from [@marvindv/jsonlogic_rs](https://github.com/marvindv/jsonlogic_rs/blob/b2ad93af575f19c6b220a6a54d599e104e72a630/src/operators/logic.rs#L33).
            </remarks>
        </member>
        <member name="T:Json.Logic.JsonWriterExtensions">
            <summary>
            Provides extended functionality for serializing rules.
            </summary>
        </member>
        <member name="M:Json.Logic.JsonWriterExtensions.WriteRule(System.Text.Json.Utf8JsonWriter,Json.Logic.Rule,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a rule to the stream, taking its specific type into account.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rule">The rule.</param>
            <param name="options">Serializer options.</param>
        </member>
        <member name="M:Json.Logic.JsonWriterExtensions.WriteRules(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IEnumerable{Json.Logic.Rule},System.Text.Json.JsonSerializerOptions,System.Boolean)">
            <summary>
            Writes a rule to the stream, taking its specific type into account.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rules">The rules.</param>
            <param name="options">Serializer options.</param>
            <param name="unwrapSingle">Unwraps single items instead of writing an array.</param>
        </member>
        <member name="T:Json.Logic.OperatorAttribute">
            <summary>
            Decorates <see cref="T:Json.Logic.Rule"/> implementations to identify a rule.
            </summary>
        </member>
        <member name="P:Json.Logic.OperatorAttribute.Name">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="M:Json.Logic.OperatorAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Logic.OperatorAttribute"/> instance.
            </summary>
            <param name="name">The identifier.</param>
        </member>
        <member name="T:Json.Logic.Rule">
            <summary>
            Provides a base class for rules.
            </summary>
        </member>
        <member name="M:Json.Logic.Rule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Text.Json.Nodes.JsonNode)~Json.Logic.Rule">
            <summary>
            Casts a JSON value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Int32)~Json.Logic.Rule">
            <summary>
            Casts an `int` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.String)~Json.Logic.Rule">
            <summary>
            Casts a `string` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.  Can also be used to create a `null` JSON literal.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Boolean)~Json.Logic.Rule">
            <summary>
            Casts a `bool` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Int64)~Json.Logic.Rule">
            <summary>
            Casts a `long` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Decimal)~Json.Logic.Rule">
            <summary>
            Casts a `decimal` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Single)~Json.Logic.Rule">
            <summary>
            Casts a `float` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Logic.Rule.op_Implicit(System.Double)~Json.Logic.Rule">
            <summary>
            Casts a `double` value to a <see cref="T:Json.Logic.Rules.LiteralRule"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Logic.LogicComponentConverter">
            <summary>
            Provides serialization for all <see cref="T:Json.Logic.Rule"/> derivatives.
            </summary>
        </member>
        <member name="P:Json.Logic.LogicComponentConverter.HandleNull">
            <summary>
            Indicates whether <see langword="null" /> should be passed to the converter
            on serialization, and whether <see cref="F:System.Text.Json.JsonTokenType.Null" />
            should be passed on deserialization.
            </summary>
        </member>
        <member name="P:Json.Logic.LogicComponentConverter.SaveSource">
            <summary>
            Gets or sets whether to save the source data for re-serialization; default is true.
            </summary>
        </member>
        <member name="M:Json.Logic.LogicComponentConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Logic.Rule"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Logic.LogicComponentConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Logic.Rule,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Logic.RuleExtensions">
            <summary>
            Calls <see cref="M:Json.Logic.Rule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)"/> with no data.
            </summary>
        </member>
        <member name="M:Json.Logic.RuleExtensions.Apply(Json.Logic.Rule)">
            <summary>
            Calls <see cref="M:Json.Logic.Rule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)"/> with no data.
            </summary>
            <param name="rule">The rule.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Json.Logic.RuleRegistry">
            <summary>
            Catalogs all of the known rules.
            </summary>
        </member>
        <member name="M:Json.Logic.RuleRegistry.GetRule(System.String)">
            <summary>
            Gets a <see cref="T:Json.Logic.Rule"/> implementation for a given identifier string.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>The <see cref="T:System.Type"/> of the rule.</returns>
        </member>
        <member name="M:Json.Logic.RuleRegistry.AddRule``1">
             <summary>
             Registers a new rule type.
             </summary>
             <typeparam name="T">The type of the rule to add.</typeparam>
             <remarks>
             Rules must contain a parameterless constructor.
            
             Decorate your rule type with one or more <see cref="T:Json.Logic.OperatorAttribute"/>s to
             define its identifier.
            
             Registering a rule with an identifier that already exists will overwrite the
             existing registration.
             </remarks>
        </member>
        <member name="T:Json.Logic.Rules.AddRule">
            <summary>
            Handles the `+` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.AddRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.AllRule">
            <summary>
            Handles the `all` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.AllRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.AndRule">
            <summary>
            Handles the `and` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.AndRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.BooleanCastRule">
            <summary>
            Handles the `!!` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.BooleanCastRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.CatRule">
            <summary>
            Handles the `cat` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.CatRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.DivideRule">
            <summary>
            Handles the `/` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.DivideRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.FilterRule">
            <summary>
            Handles the `filter` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.FilterRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.IfRule">
            <summary>
            Handles the `if` and `?:` operations.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.IfRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.InRule">
            <summary>
            Handles the `in` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.InRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Json.Logic.Rules.LessThanEqualRule" -->
        <member name="M:Json.Logic.Rules.LessThanEqualRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Json.Logic.Rules.LessThanRule" -->
        <member name="M:Json.Logic.Rules.LessThanRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.LiteralRule">
            <summary>
            Provides a stand-in "rule" for literal values.
            </summary>
            <remarks>This is not exactly part of the specification, but it helps things in this library.</remarks>
        </member>
        <member name="M:Json.Logic.Rules.LiteralRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.LogRule">
            <summary>
            Handles the `log` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.LogRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.LooseEqualsRule">
            <summary>
            Handles the `==` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.LooseEqualsRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.LooseNotEqualsRule">
            <summary>
            Handles the `!=` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.LooseNotEqualsRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MapRule">
            <summary>
            Handles the `map` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MapRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MaxRule">
            <summary>
            Handles the `max` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MaxRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MergeRule">
            <summary>
            Handles the `merge` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MergeRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MinRule">
            <summary>
            Handles the `min` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MinRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MissingRule">
            <summary>
            Handles the `missing` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MissingRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MissingSomeRule">
            <summary>
            Handles the `missing_some` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MissingSomeRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.ModRule">
            <summary>
            Handles the `%` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.ModRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MoreThanEqualRule">
            <summary>
            Handles the `>=` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MoreThanEqualRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MoreThanRule">
            <summary>
            Handles the `>` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MoreThanRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.MultiplyRule">
            <summary>
            Handles the `*` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.MultiplyRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.NoneRule">
            <summary>
            Handles the `none` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.NoneRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.NotRule">
            <summary>
            Handles the `!` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.NotRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.OrRule">
            <summary>
            Handles the `or` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.OrRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.ReduceRule">
            <summary>
            Handles the `reduce` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.ReduceRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.RuleCollection">
            <summary>
            Provides a stand-in "rule" for collections of rules.
            </summary>
            <remarks>This is not exactly part of the specification, but it helps things in this library.</remarks>
        </member>
        <member name="M:Json.Logic.Rules.RuleCollection.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.SomeRule">
            <summary>
            Handles the `some` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.SomeRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.StrictEqualsRule">
            <summary>
            Handles the `===` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.StrictEqualsRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.StrictNotEqualsRule">
            <summary>
            Handles the `!==` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.StrictNotEqualsRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.SubstrRule">
            <summary>
            Handles the `substr` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.SubstrRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.SubtractRule">
            <summary>
            Handles the `-` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.SubtractRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
        <member name="T:Json.Logic.Rules.VariableRule">
            <summary>
            Handles the `var` operation.
            </summary>
        </member>
        <member name="M:Json.Logic.Rules.VariableRule.Apply(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Applies the rule to the input data.
            </summary>
            <param name="data">The input data.</param>
            <param name="contextData">
                Optional secondary data.  Used by a few operators to pass a secondary
                data context to inner operators.
            </param>
            <returns>The result of the rule.</returns>
        </member>
    </members>
</doc>
